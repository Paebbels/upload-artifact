name: Verification of Preserving Artifact Upload

on:
  push:
  workflow_dispatch:

jobs:
  Build:
    name: Build something
    runs-on: ubuntu-24.04

    steps:
      - name: ðŸ–‰ Build 1
        run: |
          echo "Document 1 $(date --utc '+%d.%m.%Y - %H:%M:%S')"   > document1.txt
          echo "Analysis log $(date --utc '+%d.%m.%Y - %H:%M:%S')" > analysis.log
          echo "Build log $(date --utc '+%d.%m.%Y - %H:%M:%S')"    > build.log
          
          mkdir -p bin
          echo "Program $(date --utc '+%d.%m.%Y - %H:%M:%S')"   > bin/program.py
          
          mkdir -p lib
          echo "Library $(date --utc '+%d.%m.%Y - %H:%M:%S')"   > lib/common.py

      - name: ðŸ“¤ Upload artifact
        uses: pyTooling/upload-artifact@dev
        with:
          name: release
          path: |
            document1.txt
            *.log
            bin/
            lib/*.py
#          if-no-files-found: error
#          retention-days: 1

  Verify:
    name: Verify artifact content
    runs-on: ubuntu-24.04

    steps:
      - name: ðŸ“¥ Download artifact
        uses: actions/download-artifact@v4
        with:
          name: release

      - name: ðŸ“¥ Download artifact
        run: |
          set +e

          ANSI_LIGHT_RED="\e[91m"
          ANSI_LIGHT_GREEN="\e[92m"
          ANSI_NOCOLOR="\e[0m"
          
          if [[ ! -f artifact.tar ]]; then
            echo -e "${ANSI_LIGHT_RED}Artifact doesn't contain a tar file named 'artifact.tar'.${ANSI_NOCOLOR}"
            exit 1
          fi

      - name: ðŸ“¦ Extract tarball and check content
        run: |
          set +e

          ANSI_LIGHT_RED="\e[91m"
          ANSI_LIGHT_GREEN="\e[92m"
          ANSI_NOCOLOR="\e[0m"
          
          echo -n "Extracting tarball ... "
          if [[ $? -ne 0 ]]; then
            echo -e "${ANSI_LIGHT_RED}[FAILED]${ANSI_NOCOLOR}"
          else
            echo -e "${ANSI_LIGHT_GREEN}[OK]${ANSI_NOCOLOR}"
          fi
          
          expected=(
            "document1.txt"
            "analysis.log"
            "build.log"
            "bin/program.py"
            "lib/common.py"
          )

          errors=0          
          for file in "${expected[@]}"; do
            if [[ ! -f "$file" ]]; then
              echo -e "${ANSI_LIGHT_RED}Extracted artifact doesn't contain file '${file}'.${ANSI_NOCOLOR}"
              errors=$((errors + 1))
            fi  
          done
          
          echo ""
          if [[ $errors -ne 0 ]]; then
            echo -e "${ANSI_LIGHT_RED}Counted ${errors} errors.${ANSI_NOCOLOR}"
          else
            echo -e "${ANSI_LIGHT_GREEN}No errors found.${ANSI_NOCOLOR}"
          fi
