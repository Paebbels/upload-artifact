name: Upload (preserving) Artifact
description: Tarball files before uploading the artifact to preserve file privileges.
author: Patrick Lehmann (@Paebbels)

inputs:
  name:
    description: | 
      Name of the artifact to upload.
      Optional. Default is 'artifact'
    type: string
    required: false
    default: 'artifact'
  path:
    description: |
      A file, directory or wildcard pattern that describes what to upload
      Required.
    type: string
  if-no-files-found:
    description: |
      The desired behavior if no files are found using the provided path.
      Available Options:
        warn: Output a warning but do not fail the action
        error: Fail the action with an error message
        ignore: Do not output any warnings or errors, the action does not fail
      Optional. Default is 'warn'
    type: string
    required: false
    default: 'warn'
  retention-days:
    description: |
      Duration after which artifact will expire in days. 0 means using default retention.
      Minimum 1 day.
      Maximum 90 days unless changed from the repository settings page.
      Optional. Defaults to repository settings.
    type: integer
    required: false
  compression-level:
    description: |
      The level of compression for Zlib to be applied to the artifact archive.
      The value can range from 0 to 9.
      For large files that are not easily compressed, a value of 0 is recommended for significantly faster uploads.
      Optional. Default is '6'
    type: integer
    required: false
    default: 6
  overwrite:
    description: |
      If true, an artifact with a matching name will be deleted before a new one is uploaded.
      If false, the action will fail if an artifact for the given name already exists.
      Does not fail if the artifact does not exist.
      Optional. Default is 'false'
    type: boolean
    required: false
    default: false
  include-hidden-files:
    description: |
      Whether to include hidden files in the provided path in the artifact
      The file contents of any hidden files in the path should be validated before
      enabled this to avoid uploading sensitive information.
      Optional. Default is 'false'
    type: boolean
    required: false
    default: false
  temp_tarball:
    type: string
    required: false
    default: '__upload_artifact__.tar'

outputs:
  artifact-id:
    description: "GitHub ID of an Artifact, can be used by the REST API"
    value: ${{ steps.upload.outputs.artifact-id }}
  artifact-url:
    description: |
      URL to download an Artifact. Can be used in many scenarios such as linking to
      artifacts in issues or pull requests. Users must be logged-in in order for this
      URL to work. This URL is valid as long as the artifact has not expired or the
      artifact, run or repository have not been deleted
    value: ${{ steps.upload.outputs.artifact-url }}

runs:
  using: composite
  steps:
    - name: Create tarball from given file patterns
      id: prepare
      shell: bash
      run: |
        set +e

        ANSI_LIGHT_RED="\e[91m"
        ANSI_LIGHT_GREEN="\e[92m"
        ANSI_NOCOLOR="\e[0m"

        PATTERNS=()
        while IFS=$'\r\n' read -r pattern; do
          # skip empty or comment lines
          [[ "${pattern}" == "" || "${pattern:0:1}" == "#" ]] && continue

          PATTERNS+=($pattern)
        done <<<'${{ inputs.path }}'
        
        # echo "PATTERNS: ${PATTERNS[@]}"
        
        echo -n "Creating temporary tarball ... "
        tar -cf "${{ inputs.temp_tarball }}" "${PATTERNS[@]}"
        if [[ $? -ne 0 ]]; then
          echo -e "${ANSI_LIGHT_RED}[FAILED]${ANSI_NOCOLOR}"
        else
          echo -e "${ANSI_LIGHT_GREEN}[OK]${ANSI_NOCOLOR}"
        fi

    # https://github.com/actions/upload-artifact
    - name: Upload artifact
      id: upload
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.name }}
        path: ${{ inputs.temp_tarball }}
        overwrite: ${{ inputs.overwrite }}

    - name: Remove temporary tarball
      id: cleanup
      shell: bash
      run: |
        set +e

        ANSI_LIGHT_RED="\e[91m"
        ANSI_LIGHT_GREEN="\e[92m"
        ANSI_NOCOLOR="\e[0m"
        
        echo -n "Removing temporary tarball ... "
        rm -f "${{ inputs.temp_tarball }}"
        if [[ $? -ne 0 ]]; then
          echo -e "${ANSI_LIGHT_RED}[FAILED]${ANSI_NOCOLOR}"
        else
          echo -e "${ANSI_LIGHT_GREEN}[OK]${ANSI_NOCOLOR}"
        fi
